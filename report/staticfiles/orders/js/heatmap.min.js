/**
 * Carte thermique moderne pour la page de consultation
 * Visualise la distribution des activités par jour et heure avec ApexCharts
 */

// Fonction pour initialiser et mettre à jour la carte thermique
function initHeatmap() {
    // Référence à l'élément DOM pour la carte thermique
    const heatmapContainer = document.getElementById('heatmap-chart');
    const dataTypeSelect = document.getElementById('heatmap-data-type');
    const summaryElement = document.querySelector('.heatmap-summary');
    
    // Vérifier si les éléments existent
    if (!heatmapContainer || !dataTypeSelect) return;
    
    // Variables pour stocker les données et l'instance de la carte thermique
    let heatmapChart = null;
    let currentPeriod = 30; // Par défaut, même période que le tableau de bord
    let currentData = null;
    
    // Fonction pour charger les données de la carte thermique
    function loadHeatmapData(period, dataType) {
        // Afficher l'indicateur de chargement
        const loadingIndicator = document.getElementById('analytics-loading');
        if (loadingIndicator) {
            loadingIndicator.style.display = 'flex';
        }
        
        // Construire l'URL avec les paramètres
        const url = `/orders/api/analytics/heatmap/?period=${period}&data_type=${dataType}`;
        
        // Effectuer la requête AJAX
        fetch(url)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Erreur réseau: ' + response.status);
                }
                return response.json();
            })
            .then(data => {
                if (data.status === 'success') {
                    // Stocker les données actuelles
                    currentData = data;
                    
                    // Mettre à jour la carte thermique avec les nouvelles données
                    updateHeatmap(data);
                } else {
                    console.error('Erreur lors du chargement des données:', data.message);
                    showError('Erreur lors du chargement des données de la carte thermique.');
                }
                
                // Masquer l'indicateur de chargement
                if (loadingIndicator) {
                    loadingIndicator.style.display = 'none';
                }
            })
            .catch(error => {
                console.error('Erreur lors du chargement des données:', error);
                showError('Erreur lors du chargement des données de la carte thermique.');
                
                // Masquer l'indicateur de chargement
                if (loadingIndicator) {
                    loadingIndicator.style.display = 'none';
                }
            });
    }
    
    // Fonction pour mettre à jour la carte thermique avec ApexCharts
    function updateHeatmap(data) {
        // Nettoyer le conteneur
        heatmapContainer.innerHTML = '';
        
        // Préparer les données pour ApexCharts
        const seriesData = prepareHeatmapData(data);
        
        // Configuration de la carte thermique
        const options = {
            series: seriesData,
            chart: {
                height: 350,
                type: 'heatmap',
                toolbar: {
                    show: false
                },
                animations: {
                    enabled: true,
                    easing: 'easeinout',
                    speed: 800,
                    animateGradually: {
                        enabled: true,
                        delay: 150
                    },
                    dynamicAnimation: {
                        enabled: true,
                        speed: 350
                    }
                },
                fontFamily: 'inherit',
                background: 'transparent'
            },
            dataLabels: {
                enabled: false
            },
            colors: ["#ffcc00"], // Couleur MTN
            title: {
                text: getTitleText(data.data_type),
                align: 'center',
                margin: 10,
                offsetY: 10,
                style: {
                    fontSize: '16px',
                    fontWeight: 500,
                    color: '#333'
                }
            },
            plotOptions: {
                heatmap: {
                    radius: 0,
                    enableShades: true,
                    shadeIntensity: 0.8,
                    distributed: true,
                    useFillColorAsStroke: false,
                    colorScale: {
                        ranges: [
                            {
                                from: 0,
                                to: 0,
                                color: '#F5F5F5',
                                name: 'Aucune activité'
                            },
                            {
                                from: 0.01,
                                to: 20,
                                color: '#9BE9A8',
                                name: 'Très faible'
                            },
                            {
                                from: 20.01,
                                to: 40,
                                color: '#40C463',
                                name: 'Faible'
                            },
                            {
                                from: 40.01,
                                to: 60,
                                color: '#FCA636',
                                name: 'Modéré'
                            },
                            {
                                from: 60.01,
                                to: 80,
                                color: '#FF5733',
                                name: 'Élevé'
                            },
                            {
                                from: 80.01,
                                to: 100,
                                color: '#C70039',
                                name: 'Très élevé'
                            }
                        ]
                    }
                }
            },
            stroke: {
                width: 1,
                colors: ["#fff"]
            },
            tooltip: {
                custom: function({ series, seriesIndex, dataPointIndex, w }) {
                    const dayLabel = data.day_labels[seriesIndex];
                    const hourLabel = data.hour_labels[dataPointIndex];
                    const value = series[seriesIndex][dataPointIndex];
                    
                    // Extraire l'heure au format HH:00 et créer une plage horaire précise qui correspond
                    // exactement au format des heures dans le tableau d'activité
                    const hourParts = hourLabel.split(':');
                    const hour = hourParts[0];
                    const hourRange = `${hour}:00`;
                    
                    let valueText = '';
                    let intensityClass = '';
                    
                    // Déterminer la classe d'intensité en fonction de la valeur normalisée
                    // Utiliser des seuils relatifs pour une meilleure répartition visuelle
                    const maxValue = Math.max(...series.flat().filter(v => v !== null && v !== undefined));
                    const normalizedValue = maxValue > 0 ? (value / maxValue) * 100 : 0;
                    
                    if (value === 0) {
                        intensityClass = 'zero';
                    } else if (normalizedValue < 20) {
                        intensityClass = 'very-low';
                    } else if (normalizedValue < 40) {
                        intensityClass = 'low';
                    } else if (normalizedValue < 60) {
                        intensityClass = 'medium';
                    } else if (normalizedValue < 80) {
                        intensityClass = 'high';
                    } else {
                        intensityClass = 'very-high';
                    }
                    
                    switch (data.data_type) {
                        case 'activity_count':
                            valueText = `<b>${value}</b> activité(s)`;
                            break;
                        case 'reception_quantity':
                            valueText = `<b>${value.toFixed(2)}</b> unités reçues`;
                            break;
                        case 'reception_ratio':
                            valueText = `<b>${value.toFixed(2)}%</b> de réception`;
                            break;
                        default:
                            valueText = `<b>${value}</b>`;
                    }
                    
                    // Construire le contenu du tooltip
                    return `
                        <div class="apexcharts-tooltip-heatmap ${intensityClass}">
                            <div class="apexcharts-tooltip-title">${dayLabel}</div>
                            <div class="apexcharts-tooltip-hour">Heure: ${hourRange}</div>
                            <div class="apexcharts-tooltip-value">${valueText}</div>
                        </div>
                    `;
                }
            },
            xaxis: {
                labels: {
                    show: true,
                    trim: false,
                    style: {
                        fontSize: '11px',
                        fontFamily: 'inherit',
                        fontWeight: 600
                    },
                    formatter: function(val) {
                        // Afficher toutes les heures avec rotation pour éviter l'encombrement
                        const hour = parseInt(val);
                        // Utiliser le format exact des heures du tableau d'activité
                        return hour.toString().padStart(2, '0') + ':00';
                    },
                    rotateAlways: true,
                    rotate: -45,
                    minHeight: 30,
                    offsetY: 5
                },
                tooltip: {
                    enabled: true
                },
                axisTicks: {
                    show: true,
                    height: 6
                },
                axisBorder: {
                    show: true,
                    color: '#333'
                },
                crosshairs: {
                    show: true
                }
            },
            yaxis: {
                labels: {
                    show: true,
                    style: {
                        fontSize: '12px',
                        fontFamily: 'inherit',
                        fontWeight: 600
                    }
                },
                axisBorder: {
                    show: true
                },
                axisTicks: {
                    show: true
                }
            },
            legend: {
                show: true,
                position: 'bottom',
                horizontalAlign: 'center',
                fontSize: '12px',
                markers: {
                    radius: 3
                }
            },
            responsive: [{
                breakpoint: 768,
                options: {
                    chart: {
                        height: 300
                    },
                    xaxis: {
                        labels: {
                            formatter: function(val) {
                                // Afficher encore moins d'heures sur mobile
                                const hour = parseInt(val);
                                return hour % 6 === 0 ? data.hour_labels[hour] : '';
                            }
                        }
                    }
                }
            }]
        };
        
        // Créer et rendre la carte thermique
        heatmapChart = new ApexCharts(heatmapContainer, options);
        heatmapChart.render();
    }
    
    // Fonction pour préparer les données pour ApexCharts
    function prepareHeatmapData(data) {
        // Créer un tableau de séries pour ApexCharts
        const seriesData = [];
        
        // Pour chaque jour de la semaine
        for (let day = 0; day < 7; day++) {
            const dayData = {
                name: data.day_labels[day],
                data: []
            };
            
            // Pour chaque heure de la journée
            for (let hour = 0; hour < 24; hour++) {
                // Trouver la valeur correspondante dans les données
                const dataPoint = data.heatmap_data.find(item => item.day === day && item.hour === hour);
                const value = dataPoint ? dataPoint.value : 0;
                
                // Normaliser la valeur pour l'échelle de couleur (0-100)
                let normalizedValue = value;
                
                // Si c'est un pourcentage, on le laisse tel quel
                if (data.data_type === 'reception_ratio') {
                    normalizedValue = Math.min(100, Math.max(0, value));
                } 
                // Sinon, on normalise en fonction de la valeur maximale
                else {
                    const maxValue = Math.max(...data.heatmap_data.map(item => item.value));
                    normalizedValue = maxValue > 0 ? (value / maxValue) * 100 : 0;
                }
                
                // Ajouter la valeur au tableau de données du jour
                dayData.data.push({
                    x: hour.toString(),
                    y: value
                });
            }
            
            // Ajouter les données du jour à la série
            seriesData.push(dayData);
        }
        
        return seriesData;
    }
    
    // Fonction pour obtenir le texte du titre en fonction du type de données
    function getTitleText(dataType) {
        switch (dataType) {
            case 'activity_count':
                return 'Distribution des activités par jour et heure';
            case 'reception_quantity':
                return 'Quantités reçues par jour et heure';
            case 'reception_ratio':
                return 'Taux de réception (%) par jour et heure';
            default:
                return 'Carte thermique des activités';
        }
    }
    
    // Fonction pour mettre à jour le résumé sous la carte thermique
    function updateSummary(data) {
        if (!summaryElement) return;
        
        // Trouver les points chauds (valeurs les plus élevées)
        const sortedData = [...data.heatmap_data].sort((a, b) => b.value - a.value);
        const hotspots = sortedData.slice(0, 3); // Top 3 des points chauds
        
        if (hotspots.length === 0) {
            summaryElement.textContent = 'Aucune donnée disponible pour cette période.';
            return;
        }
        
        // Créer un texte de résumé
        let summaryText = '';
        
        switch (data.data_type) {
            case 'activity_count':
                const topDay = data.day_labels[hotspots[0].day];
                // Formater l'heure exactement comme dans le tableau d'activité
                const topHour = hotspots[0].hour.toString().padStart(2, '0') + ':00';
                summaryText = `Pic d'activité : ${topDay} à ${topHour} avec ${hotspots[0].value} activité(s)`;
                break;
            case 'reception_quantity':
                const totalQuantity = data.heatmap_data.reduce((sum, item) => sum + item.value, 0).toFixed(2);
                summaryText = `Quantité totale reçue : ${totalQuantity} unités`;
                break;
            case 'reception_ratio':
                // Calculer le taux moyen uniquement sur les cellules avec des données
                const avgRatio = data.heatmap_data.length > 0 ?
                    data.heatmap_data.reduce((sum, item) => sum + item.value, 0) / data.heatmap_data.length : 0;
                summaryText = `Taux de réception moyen : ${avgRatio.toFixed(2)}%`;
                break;
        }
        
        summaryElement.textContent = summaryText;
    }
    
    // Fonction pour afficher un message d'erreur
    function showError(message) {
        const errorContainer = document.getElementById('analytics-error');
        if (errorContainer) {
            errorContainer.textContent = message;
            errorContainer.style.display = 'block';
        }
    }
    
    // Écouter les changements de type de données
    dataTypeSelect.addEventListener('change', function() {
        // Détruire l'instance existante de la carte thermique si elle existe
        if (heatmapChart) {
            heatmapChart.destroy();
        }
        loadHeatmapData(currentPeriod, this.value);
    });
    
    // Écouter les changements de période
    const periodButtons = document.querySelectorAll('.period-btn');
    periodButtons.forEach(button => {
        button.addEventListener('click', function() {
            // Détruire l'instance existante de la carte thermique si elle existe
            if (heatmapChart) {
                heatmapChart.destroy();
            }
            currentPeriod = parseInt(this.dataset.period);
            loadHeatmapData(currentPeriod, dataTypeSelect.value);
        });
    });
    
    // Ajuster la taille de la carte thermique lors du redimensionnement de la fenêtre
    window.addEventListener('resize', function() {
        if (heatmapChart && currentData) {
            // Détruire et recréer la carte thermique pour s'adapter à la nouvelle taille
            heatmapChart.destroy();
            updateHeatmap(currentData);
        }
    });
    
    // Charger les données initiales
    loadHeatmapData(currentPeriod, dataTypeSelect.value);
}

// Initialiser la carte thermique quand le DOM est chargé
document.addEventListener('DOMContentLoaded', function() {
    initHeatmap();
});